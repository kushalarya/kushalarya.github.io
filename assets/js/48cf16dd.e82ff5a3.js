"use strict";(self.webpackChunkkushalarya_com=self.webpackChunkkushalarya_com||[]).push([[2778],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},621:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(4137));const i={description:"Landing page for Design Patterns",sidebar_label:"Design Patterns"},o="Design Patterns",l={unversionedId:"DesignPatterns/index",id:"DesignPatterns/index",title:"Design Patterns",description:"Landing page for Design Patterns",source:"@site/docs/DesignPatterns/index.md",sourceDirName:"DesignPatterns",slug:"/DesignPatterns/",permalink:"/notebook/DesignPatterns/",draft:!1,tags:[],version:"current",frontMatter:{description:"Landing page for Design Patterns",sidebar_label:"Design Patterns"},sidebar:"defaultSidebar",previous:{title:"The 48 Laws of Power",permalink:"/notebook/Books/The48LawsOfPower"},next:{title:"Movies",permalink:"/notebook/Movies/"}},s={},p=[{value:"References",id:"references",level:2},{value:"Notes:",id:"notes",level:2},{value:"Pillars of OOP",id:"pillars-of-oop",level:2},{value:"1. Abstraction",id:"1-abstraction",level:3},{value:"2. Encapsulation",id:"2-encapsulation",level:3},{value:"3. Polymorphism",id:"3-polymorphism",level:3},{value:"4. Inheritance",id:"4-inheritance",level:3},{value:"Relation between Objects",id:"relation-between-objects",level:2},{value:"Classification of Patterns",id:"classification-of-patterns",level:2},{value:"Features of Good Design",id:"features-of-good-design",level:2},{value:"Design Principles",id:"design-principles",level:2},{value:"SOLID Principles",id:"solid-principles",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"design-patterns"},"Design Patterns"),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://refactoring.guru/design-patterns"},"Design Patterns, Refactoring Guru"))),(0,r.kt)("h2",{id:"notes"},"Notes:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"O"),"bject ",(0,r.kt)("strong",{parentName:"p"},"O"),"riented ",(0,r.kt)("strong",{parentName:"p"},"P"),"rogramming is paradigm based on concept of wrapping peices of data, and behaviour related to that data, into special bundles called ",(0,r.kt)("strong",{parentName:"p"},"Objects"),", which are constructed from blueprints aka ",(0,r.kt)("strong",{parentName:"p"},"Classes")),(0,r.kt)("h2",{id:"pillars-of-oop"},"Pillars of OOP"),(0,r.kt)("h3",{id:"1-abstraction"},"1. Abstraction"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The concept of simplifying complex reality, by modeling classes based on the ",(0,r.kt)("strong",{parentName:"li"},"essential properties and behaviors")," they exhibit."),(0,r.kt)("li",{parentName:"ol"},"It cannot be instantiated directly and serves as a blueprint for other classes."),(0,r.kt)("li",{parentName:"ol"},"It defines one or more abstract methods, which are methods without an implementation. Subclasses that inherit from an abstract class must provide concrete implementations for these abstract methods.")),(0,r.kt)("h3",{id:"2-encapsulation"},"2. Encapsulation"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"It is a way of restricting direct access to some of an object's components while exposing others through well-defined interfaces."),(0,r.kt)("li",{parentName:"ol"},"Main goals of encapsulation are - Data hiding, Access Control, Abstraction")),(0,r.kt)("h3",{id:"3-polymorphism"},"3. Polymorphism"),(0,r.kt)("p",null,"Polymorphism is the ability of a program to detect the real class of an object and call its implementation even when its real type is unknown in the current context."),(0,r.kt)("h3",{id:"4-inheritance"},"4. Inheritance"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Inheritance allows you to create a new class that is a modified or specialized version of an existing class, promoting code reuse and the creation of a hierarchical class structure.")),(0,r.kt)("h2",{id:"relation-between-objects"},"Relation between Objects"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Association Classes\na. Aggregation\nb. Composition"),(0,r.kt)("li",{parentName:"ol"},"Dependecy\na. Compile-time dependency\nb. Runtime dependency"),(0,r.kt)("li",{parentName:"ol"},"Inheritance (Generalization)"),(0,r.kt)("li",{parentName:"ol"},"Realization (Interface Implementation)"),(0,r.kt)("li",{parentName:"ol"},"Composition Over Inheritance (COI)"),(0,r.kt)("li",{parentName:"ol"},"Dependency Injection"),(0,r.kt)("li",{parentName:"ol"},"Collaboration\n9 Peer (Sibiling) Objects")),(0,r.kt)("h2",{id:"classification-of-patterns"},"Classification of Patterns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Creational Patterns: provide ",(0,r.kt)("strong",{parentName:"p"},"object creation mechanisms")," that increase felxiblity & reuse of existing code.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Structural Patterns: explain how to ",(0,r.kt)("strong",{parentName:"p"},"assemble objects and classes into larger structures"),", still keeping the structures flexible and efficient.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Behavioural Patterns: take care of ",(0,r.kt)("strong",{parentName:"p"},"effective communication & the assignment of responsibilities")," between objects."))),(0,r.kt)("h2",{id:"features-of-good-design"},"Features of Good Design"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Code reuse"),(0,r.kt)("li",{parentName:"ul"},"Extensibility")),(0,r.kt)("h2",{id:"design-principles"},"Design Principles"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Encapsulate what varies ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Encapsulation on a method level"),(0,r.kt)("li",{parentName:"ul"},"Encapsulation on a class level"))),(0,r.kt)("li",{parentName:"ul"},"Program to an Interface, not an Implementation"),(0,r.kt)("li",{parentName:"ul"},"Favor Composition over inheritance")),(0,r.kt)("h2",{id:"solid-principles"},"SOLID Principles"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"S"),"ingle Responsiblity Principle"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"O"),"pen/Closed Principle"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"L"),"iskov Substitution Principle"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"I"),"nterface Segregation Principle"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"D"),"ependency Inversion Principle")))}m.isMDXComponent=!0}}]);